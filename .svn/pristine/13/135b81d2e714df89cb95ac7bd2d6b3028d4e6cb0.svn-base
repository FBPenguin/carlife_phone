package com.didi365.carlife.android.phone.connect;

import android.content.Context;
import android.view.MotionEvent;

import com.baidu.carlife.protobuf.CarlifeTouchActionProto.CarlifeTouchAction;
import com.didi365.carlife.android.phone.message.MsgHandlerCenter;
import com.didi365.carlife.android.phone.util.AudioPlayerUtil;
import com.didi365.carlife.android.phone.util.ByteConvert;
import com.didi365.carlife.android.phone.util.CommonParams;
import com.didi365.carlife.android.phone.util.LogUtil;
import com.didi365.carlife.android.phone.util.TouchUtil;
import com.google.protobuf.InvalidProtocolBufferException;

import java.net.InetAddress;
import java.net.Socket;

/**
 * Created by zheng on 2019/3/29
 */
public class ConnectManager {

    private final String TAG = ConnectManager.class.getSimpleName();

    private Context mContext = null;
    private static ConnectManager mInstance = null;

    public static String SERVER_URL = null;
    public static int SERVER_SOCKET_PORT = -1;
    public static int SERVER_SOCKET_VIDEO_PORT = -1;
    public static int SERVER_SOCKET_AUDIO_PORT = -1;
    public static int SERVER_SOCKET_AUDIO_TTS_PORT = -1;
    public static int SERVER_SOCKET_AUDIO_VR_PORT = -1;
    public static int SERVER_SOCKET_TOUCH_PORT = -1;
    private ConnectSocket mConnectSocket = null;
    private ConnectSocket mVideoConnectSocket = null;
    private ConnectSocket mAudioConnectSocket = null;
    private ConnectSocket mAudioTTSConnectSocket = null;
    private ConnectSocket mAudioVRConnectSocket = null;
    private ConnectSocket mTouchConnectSocket = null;

    private ConnectManager() {
    }

    public static ConnectManager getInstance() {
        if (null == mInstance) {
            synchronized (ConnectManager.class) {
                if (null == mInstance) {
                    mInstance = new ConnectManager();
                }
            }
        }
        return mInstance;
    }

    public void init(Context context) {
        mContext = context;

        SERVER_URL = CommonParams.SERVER_LOCALHOST_URL;
        SERVER_SOCKET_PORT = CommonParams.SOCKET_LOCALHOST_PORT;
        SERVER_SOCKET_VIDEO_PORT = CommonParams.SOCKET_VIDEO_LOCALHOST_PORT;
        SERVER_SOCKET_AUDIO_PORT = CommonParams.SOCKET_AUDIO_LOCALHOST_PORT;
        SERVER_SOCKET_AUDIO_TTS_PORT = CommonParams.SOCKET_AUDIO_TTS_LOCALHOST_PORT;
        SERVER_SOCKET_AUDIO_VR_PORT = CommonParams.SOCKET_AUDIO_VR_LOCALHOST_PORT;
        SERVER_SOCKET_TOUCH_PORT = CommonParams.SOCKET_TOUCH_LOCALHOST_PORT;
    }

    public void startConnectThread(String from) {
        LogUtil.e(TAG, "startConnectThread " + from);
        AOAConnectManager.getInstance().startAOAConnectThread();
    }

    public void stopConnectThread() {
        LogUtil.e(TAG, "stopConnectThread");
        AOAConnectManager.getInstance().stopAOAConnectThread();
        AOAConnectManager.getInstance().unInit();
        MsgHandlerCenter.dispatchMessage(CommonParams.MSG_CONNECT_STATUS_DISCONNECTED);
    }

    public void startAllConnectSocket() {
        InetAddress serveraddr = null;
        Socket mSocketMain = null;
        Socket mSocketVideo = null;
        Socket mSocketAudio = null;
        Socket mSocketAudioTTS = null;
        Socket mSocketAudioVR = null;
        Socket mSocketTouch = null;

        try {
            serveraddr = InetAddress.getByName(SERVER_URL);
            mSocketMain = new Socket(serveraddr, SERVER_SOCKET_PORT);
            if (null != mSocketMain) {
                LogUtil.e(TAG, "Connected to: " + mSocketMain.toString() + CommonParams.SERVER_SOCKET_NAME);
                ConnectSocket connectSocket = new ConnectSocket(CommonParams.SERVER_SOCKET_NAME, mSocketMain);
                connectSocket.startConmunication();
            }
        } catch (Exception ex) {
            LogUtil.d(TAG, "start ConnectSocket fail " + ex.getMessage());
            ex.printStackTrace();
        }

        try {
            mSocketVideo = new Socket(serveraddr, SERVER_SOCKET_VIDEO_PORT);
            if (null != mSocketVideo) {
                LogUtil.e(TAG, "Connected to: " + mSocketVideo.toString() + CommonParams.SERVER_SOCKET_VIDEO_NAME);
                ConnectSocket connectSocket = new ConnectSocket(CommonParams.SERVER_SOCKET_VIDEO_NAME, mSocketVideo);
                connectSocket.startConmunication();
            }
        } catch (Exception ex) {
            LogUtil.d(TAG, "start ConnectSocket fail " + ex.getMessage());
            ex.printStackTrace();
        }

        /*
        try {
            mSocketAudio = new Socket(serveraddr, SERVER_SOCKET_AUDIO_PORT);
            if (null != mSocketAudio) {
                LogUtil.e(TAG, "Connected to: " + mSocketAudio.toString() + CommonParams.SERVER_SOCKET_AUDIO_NAME);
                ConnectSocket connectSocket = new ConnectSocket(CommonParams.SERVER_SOCKET_AUDIO_NAME, mSocketAudio);
                connectSocket.startConmunication();
            }
        } catch (Exception ex) {
            LogUtil.d(TAG, "start ConnectSocket fail " + ex.getMessage());
            ex.printStackTrace();
        }*/

        try {
            mSocketTouch = new Socket(serveraddr, SERVER_SOCKET_TOUCH_PORT);
            if (null != mSocketTouch) {
                LogUtil.e(TAG, "Connected to: " + mSocketTouch.toString() + CommonParams.SERVER_SOCKET_TOUCH_NAME);
                ConnectSocket connectSocket = new ConnectSocket(CommonParams.SERVER_SOCKET_TOUCH_NAME, mSocketTouch);
                connectSocket.startConmunication();
            }
        } catch (Exception ex) {
            LogUtil.d(TAG, "start ConnectSocket fail " + ex.getMessage());
            ex.printStackTrace();
        }
            /*
            mSocketAudioTTS = new Socket(serveraddr, SERVER_SOCKET_AUDIO_TTS_PORT);
            if (null != mSocketAudioTTS) {
                LogUtil.d(TAG, "Connected to: " + mSocketAudioTTS.toString());
                ConnectSocket connectSocket = new ConnectSocket(CommonParams.SERVER_SOCKET_AUDIO_TTS_NAME, mSocketAudioTTS);
                connectSocket.startConmunication();
            }

            mSocketAudioVR = new Socket(serveraddr, SERVER_SOCKET_AUDIO_VR_PORT);
            if (null != mSocketAudioVR) {
                LogUtil.d(TAG, "Connected to: " + mSocketAudioVR.toString());
                ConnectSocket connectSocket = new ConnectSocket(CommonParams.SERVER_SOCKET_AUDIO_VR_NAME, mSocketAudioVR);
                connectSocket.startConmunication();
            }*/
    }

    public void startAudioSocket() {
        InetAddress serveraddr = null;
        Socket mSocketAudio = null;
        try {
            serveraddr = InetAddress.getByName(SERVER_URL);
            mSocketAudio = new Socket(serveraddr, SERVER_SOCKET_AUDIO_PORT);
            if (null != mSocketAudio) {
                LogUtil.e(TAG, "Connected to: " + mSocketAudio.toString() + CommonParams.SERVER_SOCKET_AUDIO_NAME);
                ConnectSocket connectSocket = new ConnectSocket(CommonParams.SERVER_SOCKET_AUDIO_NAME, mSocketAudio);
                connectSocket.startConmunication();
            }
        } catch (Exception ex) {
            LogUtil.d(TAG, "start ConnectSocket fail " + ex.getMessage());
            ex.printStackTrace();
        }
    }

    public void stopAllConnectSocket() {
        try {
            if (mConnectSocket != null) {
                mConnectSocket.stopConnunication();
                mConnectSocket = null;
            }
            if (mVideoConnectSocket != null) {
                mVideoConnectSocket.stopConnunication();
                mVideoConnectSocket = null;
            }
            if (mAudioConnectSocket != null) {
                mAudioConnectSocket.stopConnunication();
                mAudioConnectSocket = null;
            }
            if (mAudioTTSConnectSocket != null) {
                mAudioTTSConnectSocket.stopConnunication();
                mAudioTTSConnectSocket = null;
            }
            if (mAudioVRConnectSocket != null) {
                mAudioVRConnectSocket.stopConnunication();
                mAudioVRConnectSocket = null;
            }
            if (mTouchConnectSocket != null) {
                mTouchConnectSocket.stopConnunication();
                mTouchConnectSocket = null;
            }
        } catch (Exception e) {
            LogUtil.e(TAG, "stop ConnectSocket fail");
            e.printStackTrace();
        }
    }

    public synchronized void addConnectSocket(ConnectSocket connectSocket) {
        try {
            if (connectSocket.getConnectSocketName().equals(CommonParams.SERVER_SOCKET_NAME)) {
                mConnectSocket = connectSocket;
            } else if (connectSocket.getConnectSocketName().equals(CommonParams.SERVER_SOCKET_VIDEO_NAME)) {
                mVideoConnectSocket = connectSocket;
            } else if (connectSocket.getConnectSocketName().equals(CommonParams.SERVER_SOCKET_AUDIO_NAME)) {
                mAudioConnectSocket = connectSocket;
            } else if (connectSocket.getConnectSocketName().equals(CommonParams.SERVER_SOCKET_AUDIO_TTS_NAME)) {
                mAudioTTSConnectSocket = connectSocket;
            } else if (connectSocket.getConnectSocketName().equals(CommonParams.SERVER_SOCKET_AUDIO_VR_NAME)) {
                mAudioVRConnectSocket = connectSocket;
            } else if (connectSocket.getConnectSocketName().equals(CommonParams.SERVER_SOCKET_TOUCH_NAME)) {
                mTouchConnectSocket = connectSocket;
            }
        } catch (Exception e) {
            LogUtil.e(TAG, "add ConnectSocket fail");
            e.printStackTrace();
        }
    }

    public int writeCarlifeCmdMessage(CarlifeCmdMessage msg) {
        if (null == mConnectSocket) {
            LogUtil.e(TAG, "write error: connectSocket is null");
            return -1;
        }
        return mConnectSocket.writeData(msg);
    }

    public int writeCmdData(byte[] buffer, int len) {
        if (null == mConnectSocket) {
            LogUtil.e(TAG, "write error: connectSocket is null");
            return -1;
        }
        return mConnectSocket.writeData(buffer, len);
    }

    public int writeVideoData(byte[] buffer, int len) {
        if (null == mVideoConnectSocket) {
            LogUtil.e(TAG, "write error: video connectSocket is null");
            return -1;
        }
        return mVideoConnectSocket.writeData(buffer, len);
    }

    public int readVideoData(byte[] buffer, int len) {
        if (null == mVideoConnectSocket) {
            LogUtil.e(TAG, "read error: video connectSocket is null");
            return -1;
        }
        return mVideoConnectSocket.readData(buffer, len);
    }

    public int writeAudioData(byte[] buffer, int len) {
        if (null == mAudioConnectSocket) {
            LogUtil.e(TAG, "write error: audio connectSocket is null");
            return -1;
        }
        return mAudioConnectSocket.writeData(buffer, len);
    }

    public int readAudioData(byte[] buffer, int len) {
        if (null == mAudioConnectSocket) {
            LogUtil.e("AudioPlayerUtil", "read error: audio connectSocket is null");
            return -1;
        }
        return mAudioConnectSocket.readData(buffer, len);
    }

    public int writeAudioTTSData(byte[] buffer, int len) {
        if (null == mAudioTTSConnectSocket) {
            LogUtil.e(TAG, "write error: tts connectSocket is null");
            return -1;
        }
        return mAudioTTSConnectSocket.writeData(buffer, len);
    }

    public int readAudioTTSData(byte[] buffer, int len) {
        if (null == mAudioTTSConnectSocket) {
            LogUtil.e(TAG, "read error: tts connectSocket is null");
            return -1;
        }
        return mAudioTTSConnectSocket.readData(buffer, len);
    }

    public int writeAudioVRData(byte[] buffer, int len) {
        if (null == mAudioVRConnectSocket) {
            LogUtil.e(TAG, "write error: VR connectSocket is null");
            return -1;
        }
        return mAudioVRConnectSocket.writeData(buffer, len);
    }

    public int readAudioVRData(byte[] buffer, int len) {
        if (null == mAudioVRConnectSocket) {
            LogUtil.e(TAG, "read error: VR connectSocket is null");
            return -1;
        }
        return mAudioVRConnectSocket.readData(buffer, len);
    }

    public int writeCarlifeTouchMessage(CarlifeCmdMessage msg) {
        if (null == mTouchConnectSocket) {
            LogUtil.e(TAG, "write error: touch connectSocket is null");
            return -1;
        }
        switch (msg.getServiceType()) {
            case CommonParams.MSG_TOUCH_ACTION:
                try {
                    CarlifeTouchAction actionInfo = CarlifeTouchAction.parseFrom(msg.getData());
                    LogUtil.e(TAG, "actionInfo " + actionInfo);
                    MotionEvent motionEvent = MotionEvent.obtain(0, 0, actionInfo.getAction(), actionInfo.getX(), actionInfo.getY(), 0);
                    byte[] serializable = TouchUtil.eventToSerializable(motionEvent);
                    byte[] touchMsgByte = new byte[serializable.length + 4];
                    System.arraycopy((ByteConvert.intoByteLow(serializable.length)), 0, touchMsgByte, 0, 4);
                    System.arraycopy(serializable, 0, touchMsgByte, 4, serializable.length);
                    LogUtil.e(TAG, "touchMsgByte " + ByteConvert.printHexString(touchMsgByte, touchMsgByte.length));
                    int ret = mTouchConnectSocket.writeData(touchMsgByte, touchMsgByte.length);
                    LogUtil.e(TAG, "ret " + ret);
                    return ret;
                } catch (InvalidProtocolBufferException e) {
                    e.printStackTrace();
                }
                break;
            case CommonParams.MSG_TOUCH_ACTION_DOWN:
                break;
            case CommonParams.MSG_TOUCH_ACTION_BEGIN:
                break;
            case CommonParams.MSG_TOUCH_ACTION_UP:
                break;
            case CommonParams.MSG_TOUCH_ACTION_MOVE:
                break;
            case CommonParams.MSG_TOUCH_SINGLE_CLICK:
                break;
            case CommonParams.MSG_TOUCH_DOUBLE_CLICK:
                break;
            case CommonParams.MSG_TOUCH_LONG_PRESS:
                break;
            case CommonParams.MSG_TOUCH_CAR_HARD_KEY_CODE:
                break;
        }
        return -1;
    }
}
