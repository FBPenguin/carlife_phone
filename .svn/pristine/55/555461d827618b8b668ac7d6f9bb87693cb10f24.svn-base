package com.didi365.carlife.android.phone.util;

import com.baidu.carlife.protobuf.CarlifeMusicInitProto;
import com.didi365.carlife.android.phone.connect.AOAAccessorySetup;
import com.didi365.carlife.android.phone.connect.ConnectManager;

/**
 * Created by zheng on 2019/4/8
 */
public class AudioPlayerUtil {

    private final String TAG = AudioPlayerUtil.class.getSimpleName();

    private static AudioPlayerUtil mInstance = null;

    private MusicPCMThread musicPCMReceiveThread = null;

    private final int LEN_OF_FRAME_HEAD = 4;
    private final int LEN_OF_MSG_HEAD = 8;

    private int lenMsgHead = -1;
    private int lenMsgData = -1;

    private byte[] head = new byte[LEN_OF_MSG_HEAD];

    private boolean isRunning = false;

    private AudioPlayerUtil() {
        System.arraycopy(ByteConvert.intToBytes(CommonParams.MSG_CHANNEL_ID_AUDIO), 0, head, 0, 4);

        CarlifeMusicInitProto.CarlifeMusicInit.Builder builder = CarlifeMusicInitProto.CarlifeMusicInit.newBuilder();
        builder.setSampleRate(48000);
        builder.setChannelConfig(2);
        builder.setSampleFormat(16);
        CarlifeMusicInitProto.CarlifeMusicInit carlifeMusicInit = builder.build();
        byte[] audioData = carlifeMusicInit.toByteArray();
        byte[] packageData = new byte[CommonParams.MSG_VIDEO_HEAD_SIZE_BYTE + audioData.length];

        System.arraycopy(ByteConvert.intToBytes(CommonParams.MSG_VIDEO_HEAD_SIZE_BYTE + audioData.length), 0, head, 4, 4);
        System.arraycopy(ByteConvert.intToBytes(audioData.length), 0, packageData, 0, 4);
        System.arraycopy(ByteConvert.longToBytesLowbyte(System.currentTimeMillis()), 0, packageData, 4, 4);
        System.arraycopy(ByteConvert.intToBytes(CommonParams.MSG_MEDIA_INIT), 0, packageData, 8, 4);

        System.arraycopy(audioData, 0, packageData, CommonParams.MSG_VIDEO_HEAD_SIZE_BYTE,audioData.length);

        AOAAccessorySetup.getInstance().bulkTransferOut(head, LEN_OF_MSG_HEAD, packageData, packageData.length);
    }

    public static AudioPlayerUtil getInstance() {
        if (mInstance == null) {
            mInstance = new AudioPlayerUtil();
        }
        return mInstance;
    }

    public void startDecode() {
        isRunning = true;
        if (musicPCMReceiveThread == null) {
            musicPCMReceiveThread = new MusicPCMThread();
            musicPCMReceiveThread.start();
        }
    }

    public void stopDecode() {
        isRunning = false;
        musicPCMReceiveThread = null;
    }

    private class MusicPCMThread extends Thread {

        @Override
        public void run() {
            LogUtil.e(TAG, "START THREAD AUDIO RUN");
            byte[] msgHead = new byte[LEN_OF_FRAME_HEAD];
            int ret = -1;
            while (isRunning) {
                ret = ConnectManager.getInstance().readAudioData(msgHead, LEN_OF_FRAME_HEAD);
                if (ret == -1) {
                    continue;
                }
                //LogUtil.e(TAG, "msgHead " + ByteConvert.printHexString(msgHead, msgHead.length));
                lenMsgData = ByteConvert.bytesToInt(msgHead);
                LogUtil.e(TAG, "lenMsgData " + lenMsgData);
                byte[] msgData = new byte[lenMsgData];
                ConnectManager.getInstance().readAudioData(msgData, lenMsgData);

                lenMsgHead = CommonParams.MSG_VIDEO_HEAD_SIZE_BYTE;

                System.arraycopy(ByteConvert.intToBytes(lenMsgHead + lenMsgData), 0, head, 4, 4);

                byte[] packageData = new byte[CommonParams.MSG_VIDEO_HEAD_SIZE_BYTE + lenMsgData];

                System.arraycopy(msgHead, 0, packageData, 0, 4);
                System.arraycopy(ByteConvert.longToBytesLowbyte(System.currentTimeMillis()), 0, packageData, 4, 4);
                System.arraycopy(ByteConvert.intToBytes(CommonParams.MSG_MEDIA_DATA), 0, packageData, 8, 4);

                System.arraycopy(msgData, 0, packageData, CommonParams.MSG_VIDEO_HEAD_SIZE_BYTE, lenMsgData);

                AOAAccessorySetup.getInstance().bulkTransferOut(head, LEN_OF_MSG_HEAD, packageData, packageData.length);
            }
        }
    }
}
